PreviewProjectCard.astro
---
interface preview_project_Props {
    project_name: string;
    made_by: string;
    tec_use: string;
}
const { project_name, made_by, tec_use } = Astro.props;
---

<div
    class="min-w-min max-w-fit felx flex-col items-center bg-blue-400 border-2 rounded-lg relative"
>
    <div class="slider justify-self-center p-2 size-32">
        <img src="no_foto_user.PNG" class="acctive" />
        <img src="data-migration.png" />
    </div>

    <button id={`button_prev`} class="hidden absolute top-1/2 left-0">⬅</button
    >

    <button id={`button_next`} class="hidden absolute top-1/2 right-0"
        >➡</button
    >

    <script>
        let slider = document.getElementsByClassName(
            "slider",
        )[0] as HTMLElement;

        let nextBtn = document.getElementById(`button_next`);
        let prevBtn = document.getElementById(`button_prev`);

        const moveToNextSlide = () => {
            slider.append(slider.querySelector("img:first-child"));
        };

        const moveToPrevSlide = () => {
            slider.prepend(slider.querySelector("img:last-child"));
        };

        nextBtn.onclick = moveToNextSlide;
        prevBtn.onclick = moveToPrevSlide;

        setInterval(moveToNextSlide, 10000);
    </script>
    <div class="place-items-start p-2">
        <h2>Project: {project_name}</h2>
        <p>By: {made_by}</p>
        <p>Tec invol: {tec_use}</p>
    </div>
</div>
---
prv dark_mode
@media screen and (prefers-color-scheme: dark) {
    :root {
        --project_bg_card: 43, 116, 214;
        --layout_bg: 17 24 39;
        --bt_bg: 91 33 182;
        --title_color: 255, 255, 255;
        --subtitle_clor: 150, 149, 152;
    }

}
-----
.bliand_mode {
        --project_bg_card: 255, 255, 255;
        --layout_bg: 255, 255, 255;
        --bt_bg: 91, 33, 182;
        --title_color: 0, 0, 0;
        --subtitle_clor: 150, 149, 152;
        background: rgba(var(--background), 0.5);
    }
}
----
svg moon
<svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="icon icon-1"
    >
        <path
            d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z"
        ></path>
    </svg>
svg sun
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-1">
                    <path d="M12 12m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0"></path>
                    <path d="M3 12h1m8 -9v1m8 8h1m-9 8v1m-6.4 -15.4l.7 .7m12.1 -.7l-.7 .7m0 11.4l.7 .7m-12.1 -.7l-.7 .7"></path>
                  </svg>
---
js dark_mode
function toggleDarkMode() {
    const body = document.body;
    body.classList.toggle("dark");
    const darkModeButton = document.getElementById("bt_darke_mode");
    if (body.classList.contains("dark")) {
      darkModeButton.innerText = "Light Mode";
    } else {
      darkModeButton.innerText = "Dark Mode";
    }
  }
  ----
  let localstorage = {
  getItem: (key) => {
    return document.body.classList.contains("dark_mode") ? "dark" : "light";
  },
  setItem: (key, value) => {
    if (value === "dark") {
      document.body.classList.add("dark_mode");
    } else {
      document.body.classList.remove("dark_mode");
    }
  },
};

---
function toggleDarkMode() {
  document.body.classList.toggle("dark_mode");
  if (document.body.classList.contains("dark_mode")) {
    localStorage.setItem("theme", "dark");
  } else {
    localStorage.setItem("theme", "light");
  }
}

if (localStorage.getItem("theme") === "dark") {
  document.body.classList.add("dark_mode");
}